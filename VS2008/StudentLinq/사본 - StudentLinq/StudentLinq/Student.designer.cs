#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.1433
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentLinq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="STUDENTDATABASE")]
	public partial class StudentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public StudentDataContext() : 
				base(global::StudentLinq.Properties.Settings.Default.STUDENTDATABASEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Student> Student
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[Table(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Student_ID;
		
		private string _Student_Name;
		
		private string _Student_Phone;
		
		private string _Student_Address;
		
		private char _Student_chk;
		
		private System.DateTime _Student_InDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudent_IDChanging(string value);
    partial void OnStudent_IDChanged();
    partial void OnStudent_NameChanging(string value);
    partial void OnStudent_NameChanged();
    partial void OnStudent_PhoneChanging(string value);
    partial void OnStudent_PhoneChanged();
    partial void OnStudent_AddressChanging(string value);
    partial void OnStudent_AddressChanged();
    partial void OnStudent_chkChanging(char value);
    partial void OnStudent_chkChanged();
    partial void OnStudent_InDateChanging(System.DateTime value);
    partial void OnStudent_InDateChanged();
    #endregion
		
		public Student()
		{
			OnCreated();
		}
		
		[Column(Storage="_Student_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Student_ID
		{
			get
			{
				return this._Student_ID;
			}
			set
			{
				if ((this._Student_ID != value))
				{
					this.OnStudent_IDChanging(value);
					this.SendPropertyChanging();
					this._Student_ID = value;
					this.SendPropertyChanged("Student_ID");
					this.OnStudent_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Student_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Name
		{
			get
			{
				return this._Student_Name;
			}
			set
			{
				if ((this._Student_Name != value))
				{
					this.OnStudent_NameChanging(value);
					this.SendPropertyChanging();
					this._Student_Name = value;
					this.SendPropertyChanged("Student_Name");
					this.OnStudent_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Student_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Phone
		{
			get
			{
				return this._Student_Phone;
			}
			set
			{
				if ((this._Student_Phone != value))
				{
					this.OnStudent_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Student_Phone = value;
					this.SendPropertyChanged("Student_Phone");
					this.OnStudent_PhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Student_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Address
		{
			get
			{
				return this._Student_Address;
			}
			set
			{
				if ((this._Student_Address != value))
				{
					this.OnStudent_AddressChanging(value);
					this.SendPropertyChanging();
					this._Student_Address = value;
					this.SendPropertyChanged("Student_Address");
					this.OnStudent_AddressChanged();
				}
			}
		}
		
		[Column(Storage="_Student_chk", DbType="Char(1) NOT NULL")]
		public char Student_chk
		{
			get
			{
				return this._Student_chk;
			}
			set
			{
				if ((this._Student_chk != value))
				{
					this.OnStudent_chkChanging(value);
					this.SendPropertyChanging();
					this._Student_chk = value;
					this.SendPropertyChanged("Student_chk");
					this.OnStudent_chkChanged();
				}
			}
		}
		
		[Column(Storage="_Student_InDate", DbType="DateTime NOT NULL")]
		public System.DateTime Student_InDate
		{
			get
			{
				return this._Student_InDate;
			}
			set
			{
				if ((this._Student_InDate != value))
				{
					this.OnStudent_InDateChanging(value);
					this.SendPropertyChanging();
					this._Student_InDate = value;
					this.SendPropertyChanged("Student_InDate");
					this.OnStudent_InDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
