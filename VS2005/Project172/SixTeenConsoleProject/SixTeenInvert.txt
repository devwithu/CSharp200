01:  using System;
02:  namespace Com.JungBo.Logic{
03:      public class SixTeenInvert{
04:          private int inverNum = 0;
05:          private int[,] sti;
06:          public SixTeenInvert(int[,] sti) {
07:              //2차원 배열 깊은 복사
08:              this.sti = MatrixTrans<int>.Mat2Clone(sti,
09:                  sti.GetLength(0), sti.GetLength(1));
10:          }//
11:          //앞의수가 뒤의 수보다 큰 경우
12:          //2893이라면 83, 93 등 2경우가 발생
13:          public void InvertNumbers() {
14:              int[] m = MatrixTrans<int>.Mat2to1(sti);
15:              int num = m.GetLength(0);
16:              for (int i = 0; i < num-1; i++){
17:                  for (int j = i+1; j < num; j++){
18:                      if(m[j]!=0 && m[i]>m[j]){
19:                          inverNum++;
20:                      }
21:                  }
22:              }
23:          }
24:          //16또는 0이 있는 행의 위치
25:          public int ZeroRow() {
26:              int locate = 0;
27:              int col = sti.GetLength(1);
28:              int[] m = MatrixTrans<int>.Mat2to1(sti);
29:              int num = m.GetLength(0);
30:              for (int i = 0; i < num ; i++){
31:                 if(m[i]==0){
32:                     locate = i / col;
33:                     break;
34:                 }
35:              }
36:              return locate;
37:          }//
38:          public int InverNum{
39:              get { return inverNum; }
40:          }
41:          //0또는 16이 있는 행+뒤집어진 수+row가 
42:          //홀수면 16게임 가능
43:          public bool IsPossible(){
44:              if ((sti.GetLength(0) +
45:                               inverNum+ZeroRow())%2 == 0){
46:                  return false;
47:              }
48:              else {
49:                  return true;
50:              }
51:          }
52:      }
53:  }
