01: using System;
02: namespace Com.JungBo.Maths{
03:     //Equals 오버라이딩
04:     public class Z{
05:         //중요한 데이터-> 멤버필드
06:         private double x;
07:         private double y;
08:         //외부에서 입력받아 초기화
09:         public Z(double x, double y){
10:             this.x = x;
11:             this.y = y;
12:         }
13:         //생성자 오버로딩->이미 존재하는 것을 이용
14:         public Z():this(0.0, 0.0){}
15:         //생성자 오버로딩-> 복사생성자
16:         public Z(Z z):this(z.X,z.Y){}
17:         //프로퍼티
18:         public double X {
19:             get { return x; }
20:             set { this.x = value; }
21:         }
22: 
23:         public double Y{
24:             get { return y; }
25:             set { this.y = value; }
26:         }
27: 
28:         //중요한 데이터 변경없이 보여주기
29:         public override string ToString(){
30:             if (y < 0){
31:                 return string.Format("({0} - {1}i)",
32:                     x,Math.Abs(y));
33:             }
34:             else{
35:                 return string.Format("({0} + {1}i)",
36:                     x,  y);
37:             }
38:         }
39: 
40:         public static Z operator +(Z z1, Z z2){
41:             return new Z(z1.X + z2.X, z1.Y + z2.Y);
42:         }//
43: 
44:         public static Z operator -(Z z1, Z z2){
45:             return new Z(z1.X - z2.X, z1.Y - z2.Y);
46:         }//
47: 
48:         public static Z operator *(Z z1, Z z2){
49:             return new Z(z1.X * z2.X - z1.Y * z2.Y,
50:                          z1.X * z2.Y +z2.X * z1.Y);
51:         }//
52: 
53:         public static Z operator *(double c, Z z1){
54:             return new Z(c * z1.X, c * z1.Y);
55:         }//
56: 
57:         public static Z operator ~(Z z1){
58:             return new Z(z1.X, -z1.Y);
59:         }//
60: 
61:         public static Z operator /(Z z1, Z z2){
62:             Z zt = z2 * (~z2);
63:             Z newZ=z1*(~z2);
64:             return  newZ/zt.X;
65:         }//
66: 
67:         public static Z operator /(Z z1, double c){
68:             return new Z(z1.X / c, z1.Y / c);
69:         }//
70: 
71:         public static double ZAbs(Z az) {
72:             Z zz=az*(~az);
73:             return Math.Sqrt(zz.X);
74:         }
75:         //Equals 오버라이딩
76:         public override bool Equals(object obj){
77:             Z cp = obj as Z;
78:             if (x == cp.X && y == cp.Y){
79:                 return true;
80:             }
81:             else{
82:                 return false;
83:             }
84:         }//
85:         public override int GetHashCode(){
86:             return base.GetHashCode() + 37;
87:         }//
88:         //항상 ==와 != 같이 필요
89:         public static bool operator ==(Z z1, Z z2){
90:             //같다면
91:             return z1.Equals(z2);
92:         }//
93:         //항상 ==와 != 같이 필요
94:         public static bool operator !=(Z z1, Z z2){
95:             //같지 않다면
96:             return !z1.Equals(z2);
97:         }//
98:     }//class
99: }
