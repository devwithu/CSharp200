using System;
using System.Collections.Generic;
using System.Text;

namespace Com.JungBo.Logic
{
    public class Floyd
    {
        private int[,] p;
        private int[,] data;
        public string[] name;
        
        public Floyd()
        {
            Init();        
        }

        public void Init()
        {            
            name = new string[]
            {
                "용산", "남영", "서울역", "시청", "종각", "종로3가", "종로 5가", "동대문", "동묘앞", "신설동", "제기동",
                "청량리(지하)", "을지로입구", "을지로3가", "을지로4가", "동대문운동장", "신당", "상왕십리", "왕십리", "한양대",
                "뚝섬", "성수", "충무로", "동대입구", "약수", "금호", "옥수", "이촌", "신용산", "삼각지", "숙대입구", "회현", "명동",
                "청구", "신금호", "행당", "마장", "녹사평", "이태원", "한강진", "버티고개", "서빙고", "한남", "응봉"
            };

            data = new int[,] {
                {0, 1, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100,	100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	1, 0, 1, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 1,	0, 1, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 1, 0,	1, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 1, 0, 100, 100, 100, 100, 100, 100, 100,	100,100,100, 100, 100, 100, 100, 100,100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100},
                {100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 1, 100, 100, 100,	100, 100, 100, 1, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	1, 100,	100, 100, 100, 100, 100, 1, 0, 1, 100,100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100,100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 1, 100, 100, 100, 100, 100, 100, 1, 0, 1,100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 1,	0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100,	100, 100, 1},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 1, 0,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 1, 100, 1, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 1,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 1,	100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 1,	0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 1, 0,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 1, 1},
                {1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100,100, 100, 100, 1, 0, 1, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,	100,100, 100, 100, 100,	1, 0, 1, 100, 100, 100,	100, 100, 100, 1, 100, 100, 100, 100, 100, 100},
                {100, 100, 1, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 0, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 1, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 1, 100, 100,	100, 100, 100, 100, 100, 100, 1, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,100,100, 100, 100, 100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 1, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 1,	0, 100,	100, 100, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 100, 100, 100, 100, 100, 100,	100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 0, 1, 100, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 ,100, 100, 1, 0, 1, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 ,100, 100, 100, 1, 0, 100, 100, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 1, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100,	1, 0, 100},
                {100, 100, 100, 100, 100, 100, 100,	100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0}
            };
            p = new int[data.GetLength(0), data.GetLength(0)];
            
        }
        
        /// <summary>
        /// Floyd 알고리즘을 이용하여 최단경로의 비용과 함께 최단경로를 구하는 함수
        /// </summary>
        
        public void Distance()
        {           
            for (int i = 0; i < data.GetLength(0); i++)
            {
                for (int j = 0; j < data.GetLength(0); j++)
                {
                    p[i, j] = -1;
                }                
            }

            for (int k = 0; k < data.GetLength(0); k++)
			{
                for (int i = 0; i < data.GetLength(0); i++)
                {
                    for (int j = 0; j < data.GetLength(0); j++)
                    {
                        if (data[i, j] > data[i, k] + data[k, j])
                        {
                            p[i, j] = k;
                            data[i, j] = data[i, k] + data[k, j];
                        }
                    }
                }
            }           

        }//

        /// <summary>
        /// 최단경로 중간 경유지 출력
        /// </summary>
        /// <param name="q">출발지</param>
        /// <param name="r">도착지</param>
        public string Path(int q, int r)
        {
            StringBuilder sb = new StringBuilder();

            if (p[q,r] != -1)
            {                
                sb.Append(Path(q, p[q, r]));
                sb.AppendFormat("{0} -> ", name[p[q, r]]);
                sb.Append(Path(p[q, r], r));
            }

            return sb.ToString();
        }//

        /// <summary>
        /// 모든 경로를 출력 해주는 함수
        /// </summary>
        public string PrintPath()
        {
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < data.GetLength(0); i++)
            {
                for (int j = 0; j < data.GetLength(0); j++)
                {
                    if (i != j)
                    {
                        sb.AppendFormat("[{0} -> {1}] : ", name[i], name[j]);
                        sb.AppendFormat("{0} => ", name[i]);
                        sb.Append(Path(i, j));
                        sb.AppendFormat("{0} ", name[j]);
                    }
                    sb.Append("\n");
                }
            }
            return sb.ToString();
        }//
    }//class Floyd
}//namespace
