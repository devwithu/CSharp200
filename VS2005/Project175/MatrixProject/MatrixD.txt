001:  using System;
002:  namespace Com.JungBo.Logic{
003:   public class MatrixD{
004:      private double[,] matrxsA;//A
005:      public double[,]  MatrxsA{
006:          get {
007:        return MatrixTrans<double>.Mat2Clone(matrxsA);//깊은복사
008:          }
009:      }
010:      public MatrixD(double[,] mats){
011:          SetMatrxsA(mats);
012:      }
013:      public MatrixD(){}
014:      //복사 생성자-> 깊은 복사를 위한 방법
015:      public MatrixD(MatrixD md)  {
016:          matrxsA = md.MatrxsA;//프로퍼티를 이용한 깊은 복사
017:      }
018:      public void SetMatrxsA(double[,] mats){
019:          //2차원 배열을 2차원배열로 깊은 복사
020:          matrxsA = MatrixTrans<double>.Mat2Clone(mats);//깊은복사
021:      }
022:      //역행렬 구하기
023:      public static MatrixD operator ~(MatrixD md){
024:          //섹션 174의 역행렬 구하기
025:          return new MatrixD(Make(md));
026:      }
027:      //두 행렬의 곱
028:      public static MatrixD operator *(MatrixD md1,MatrixD md2){
029:          return new MatrixD(MatrixMulti(md1.MatrxsA, md2.MatrxsA));
030:      }
031:      //두 행렬의 덧셈
032:      public static MatrixD operator +(MatrixD md1, MatrixD md2){
033:          return new MatrixD(MatrixAdd(md1.MatrxsA, md2.MatrxsA));
034:      }
035:      private static double[,] MatrixMulti(double[,] a, double[,] b){
036:          int mRow = a.GetLength(0);
037:          int mCol = a.GetLength(1);
038:          int nRow = b.GetLength(0);
039:          int nCol = b.GetLength(1);
040:          double[,] c = new double[mRow, nCol];
041:          for (int i = 0; i < mRow; i++)
042:          {
043:              for (int j = 0; j < nCol; j++)
044:              {
045:                  c[i, j] = 0.0;
046:                  for (int k = 0; k < nRow; k++)
047:                  {
048:                      //Cij=Sigma[Aik x BKj]
049:                      c[i, j] += a[i, k] * b[k, j];
050:                  }
051:              }
052:          }
053:          return c;
054:      }//
055:      private static double[,] MatrixAdd(double[,] a, double[,] b){
056:          int mRow = a.GetLength(0);
057:          int mCol = a.GetLength(1);
058:          double[,] c = new double[mRow, mCol];
059:          for (int i = 0; i < mRow; i++){
060:              for (int j = 0; j < mCol; j++){
061:                  c[i, j] = a[i, j] + b[i, j];
062:              }
063:          }
064:          return c;
065:      }//
066:      public void PrintMatrxsA(){
067:          int row = matrxsA.GetLength(0);
068:          int col = matrxsA.GetLength(1);
069:          for (int i = 0; i < row; i++){
070:              for (int j = 0; j < col; j++){
071:                  System.Console.Write("{0}\t", matrxsA[i, j]);
072:              }
073:              System.Console.WriteLine();
074:          }
075:      }//
076:      public int RowNum {
077:          get { return this.matrxsA.GetLength(0); }
078:      }
079:      public int ColNum{
080:          get { return this.matrxsA.GetLength(1); }
081:      }
082:      //섹션 174
083:      private static double[,]  Make(MatrixD md){
084:          double[,] matrxAS = md.MatrxsA;
085:          int rowAS = matrxAS.GetLength(0);//정방형 행렬만 역행렬을 구할 수 있다.
086:          int colAS = matrxAS.GetLength(1);
087:          double[,] matrx=new double[rowAS,2*colAS];
088:          int row = matrx.GetLength(0);//정방형 행렬만 역행렬을 구할 수 있다.
089:          int col = matrx.GetLength(1);
090:          for (int i = 0; i < rowAS; i++){
091:              //A 세팅
092:              for (int j = 0; j < colAS; j++){
093:                  matrx[i, j] = matrxAS[i, j];
094:              }
095:              //E 세팅
096:              matrx[i, i + colAS] = 1;
097:          }
098:          for (int k = 0; k < row; k++){
099:              double max = 0.0;//행에서 가장 큰 값을 구하기
100:              int pivotRow = k;//가장 큰 값이 있는 행의위치 찾기
101:              for (int j = k; j < row; j++){
102:             //x에서 pivot을 선택하면 y에 대한 pivot,그다음 z에 대한
103:                  //그러므로 칼럼을 바꿔가며 확인한다.
104:                  double tempMax = Math.Abs(matrx[j, k]);
105:                  if (max < tempMax){
106:                      max = tempMax;
107:                      pivotRow = j;//행에서 가장 큰 값을 찾아 행의 위치저장
108:                  }
109:              }
110:              if (k != pivotRow){
111:              //피봇행과 현재위치가 같다면 바꾸지 않는다.
112:                  //한줄을 피봇줄과 바꾼다.
113:                  for (int j = 0; j < col; j++){//모든 열을 바꿔야 한다.
114:                      Swap(ref matrx[k, j], ref matrx[pivotRow, j]);
115:                  }
116:              }
117:              double pivot = matrx[k, k];//피봇은 (0,0),(1,1),(2,2)에 있다.
118:              for (int j = k; j < col; j++){
119:                  matrx[k, j] /= pivot;//행에서 가장 큰 값을 1로 바꾼다.
120:              }
121:              for (int i = 0; i < row; i++){
122:                  if (i != k){
123:                      double delta = matrx[i, k];
124:                      for (int j = k; j < col; j++){
125:                          matrx[i, j] -= delta * matrx[k, j];
126:                      }
127:                  }
128:              }
129:          }
130:          //E--> A_1를 만든 후 기본행렬로 저장
131:          for (int i = 0; i < rowAS; i++){
132:              for (int j = 0; j < colAS; j++){
133:                  matrxAS[i, j] = matrx[i, j + rowAS];
134:              }
135:          }
136:          return matrxAS;
137:      }
138:      private static void Swap(ref double a, ref double b) {
139:          double temp = a;
140:          a = b;
141:          b = temp;
142:      }//
143:   }
144:  }
