01: using System;
02: using System.Collections;   //ArrayList 때문에 using
03: namespace Com.JungBo.Logic{
04:   public class CardList{
05:     // 카드 순서 (♠ > ◆ > ♥ > ♣)
06:     public  string[] DECK ={ "S","D","H","C"};
07:     public  string[] SUIT 
08:  ={ "A","2","3","4","5","6","7","8","9","T","J","Q","K" };
09: 
10:     //중요한 데이터 멤버
11:     ArrayList list = new ArrayList(10);//Capacity 10
12:     public void MakeCard() {
13:         list.Clear();//list 비우기
14:         foreach (string deck in DECK){
15:             foreach (string suit in SUIT){
16:                 //SA,S2, S3, .... 대입
17:                 //list에 채우기
18:                 list.Add(string.Concat(deck,suit));
19:             }
20:         }
21:     }//
22:     //12개씩 출력 12개씩 4줄
23:     public void PrintCard() {
24:         //list에 있는 string 개수 Count
25:         for (int i = 0; i < list.Count; i++){
26:             //list안에 들어가면 object로 프로모션
27:             //그러므로 캐스팅 필요 as
28:             string cards = list[i] as string;
29:             Console.Write("{0}  ",cards);
30:             if((i+1)%SUIT.Length==0){//12개씩
31:                 Console.WriteLine();
32:             }
33:         }
34:     }
35:     //list 앞뒤로 바꾸기
36:     public void ReverseCard() {
37:         list.Reverse();
38:     }
39:     public string[]  ToArray(){
40:         //ArrayList 엘리먼트를 object[]로 
41:         object[] objs = list.ToArray();
42:         //배열의 크기 objs.Length
43:         string [] strs=new string[objs.Length];
44:         //ArrayList 순서대로 string으로 캐스팅
45:         for (int i = 0; i < objs.Length; i++){
46:             strs[i] = objs[i] as string;
47:         }
48:         return strs;
49:     }
50:     public int IndexOf(string str) {
51:         return list.IndexOf(str);
52:     }
53:     public void Sort(){
54:         //알파벳-숫자로 정렬
55:         list.Sort();
56:     }
57:   }//class
58: }//namespace
