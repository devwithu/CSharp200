01: using System;
02: namespace Com.JungBo.Maths{
03:     //연산자 오버로딩
04:     public class Z{
05:         //중요한 데이터-> 멤버필드
06:         private double x;
07:         private double y;
08:         //외부에서 입력받아 초기화
09:         public Z(double x, double y){
10:             this.x = x;
11:             this.y = y;
12:         }
13:         //생성자 오버로딩->이미 존재하는 것을 이용
14:         public Z():this(0.0, 0.0){}
15:         //중요한 데이터 변경없이 보여주기
16:         public override string ToString(){
17:             if (y < 0){
18:                 return string.Format("({0} - {1}i)",
19:                     x,Math.Abs(y));
20:             }
21:             else {
22:                 return string.Format("({0} + {1}i)",
23:                     x,  y);
24:             }
25:         }
26:         //생성자 오버로딩-> 복사생성자
27:         public Z(Z z) : this(z.X, z.Y) { }
28:         //X 프로퍼티
29:         public double X
30:         {
31:             get { return x; }
32:             set { this.x = value; }
33:         }
34:         //Y 프로퍼티
35:         public double Y
36:         {
37:             get { return y; }
38:             set { this.y = value; }
39:         }
40:         //연산자 오버로딩 +
41:         public static Z operator +(Z z1, Z z2){
42:             return new Z(z1.X + z2.X, z1.Y + z2.Y);
43:         }//
44:         //연산자 오버로딩 -
45:         public static Z operator -(Z z1, Z z2){
46:             return new Z(z1.X - z2.X, z1.Y - z2.Y);
47:         }//
48:         //연산자 오버로딩 *
49:         public static Z operator *(Z z1, Z z2){
50:             return new Z(z1.X * z2.X - z1.Y * z2.Y,
51:                          z1.X * z2.Y +z2.X * z1.Y);
52:         }//
53:         //연산자 오버로딩 c*Z
54:         public static Z operator *(double c, Z z1){
55:             return new Z(c * z1.X, c * z1.Y);
56:         }//
57:         //연산자 오버로딩 ~Z
58:         public static Z operator ~(Z z1){
59:             return new Z(z1.X, -z1.Y);
60:         }//
61:         //연산자 오버로딩 /
62:         public static Z operator /(Z z1, Z z2){
63:             Z zt = z2 * (~z2);
64:             Z newZ=z1*(~z2);
65:             return  newZ/zt.X;
66:         }//
67:         //연산자 오버로딩 z/c
68:         public static Z operator /(Z z1, double c){
69:             return new Z(z1.X / c, z1.Y / c);
70:         }//
71:         //연산자 오버로딩을 이용한 복소수 크기
72:         public static double ZAbs(Z az) {
73:             Z zz=az*(~az);
74:             return Math.Sqrt(zz.X);
75:         }
76:     }//class
77: }
