01:  using System;
02:  namespace Com.JungBo.Logic{
03:      public class IReduceFraction{
04:  
05:          private int bunja;  //분자
06:          private int bunmo;  //분모
07:          //분자 프로퍼티
08:          public int Bunja{
09:              get { return bunja; }
10:          }
11:          //분모 프로퍼티
12:          public int Bunmo{
13:              get { return bunmo; }
14:          }
15:          public void SetIReduceFraction(int bunja, int bunmo) {
16:              if (bunmo == 0){
17:                  throw new UnFittableException(
18:                      "분모가 0일수 없습니다. ");
19:              }
20:              else if (bunja == 0){
21:                  this.bunmo = 1;
22:              }
23:              else{
24:                  try{
25:                      this.bunja = bunja / UclidMath.GCD(
26:                          bunja > 0 ? bunja : -1 * bunja,
27:                          bunmo > 0 ? bunmo : -1 * bunmo);
28:                      this.bunmo = bunmo / UclidMath.GCD(
29:                          bunja > 0 ? bunja : -1 * bunja,
30:                          bunmo > 0 ? bunmo : -1 * bunmo);
31:                  }
32:                  catch (UnFittableException ufe){
33:                      throw ufe;
34:                  }
35:              }
36:          }
37:          //복사생성자
38:          public IReduceFraction(IReduceFraction bs) 
39:          :this(bs.Bunja,bs.Bunmo){}
40:          //생성자
41:          public IReduceFraction(int bunja, int bunmo) {
42:              SetIReduceFraction(bunja,bunmo);
43:          }//
44:          public override string ToString(){
45:              return string.Format("{0}/{1}",
46:                  bunja, bunmo=(bunja==0?1:bunmo));
47:          }//
48:          //연산자 오버로딩
49:          public static IReduceFraction operator+
50:              (IReduceFraction bs1, IReduceFraction bs2){
51:              return new IReduceFraction(
52:                  (bs1.Bunja*bs2.Bunmo+bs1.Bunmo*bs2.Bunja),
53:                  (bs1.Bunmo*bs2.Bunmo));
54:          }
55:          public static IReduceFraction operator -
56:              (IReduceFraction bs1, IReduceFraction bs2){
57:              return new IReduceFraction(
58:              (bs1.Bunja * bs2.Bunmo - bs1.Bunmo * bs2.Bunja),
59:                  (bs1.Bunmo * bs2.Bunmo));
60:          }//
61:          public static IReduceFraction operator *
62:              (IReduceFraction bs1, IReduceFraction bs2){
63:              return new IReduceFraction(
64:                  (bs1.Bunja * bs2.Bunja),
65:                  (bs1.Bunmo * bs2.Bunmo));
66:          }//
67:          public static IReduceFraction operator /
68:              (IReduceFraction bs1, IReduceFraction bs2){
69:              return new IReduceFraction(
70:            (bs1.Bunja * bs2.Bunmo),(bs1.Bunmo * bs2.Bunja));
71:          }//
72:  
73:          public static bool operator==
74:              (IReduceFraction bs1, IReduceFraction bs2){
75:              return bs1.Equals(bs2);
76:          }//
77:          public static bool operator !=
78:             (IReduceFraction bs1, IReduceFraction bs2){
79:              return ! bs1.Equals(bs2);
80:          }//
81:          //Equals 오버라이딩
82:          public override bool Equals(object obj){
83:              IReduceFraction irrF=obj as IReduceFraction;
84:              return bunja == irrF.Bunja &&bunmo == irrF.Bunmo;
85:          }
86:          public override int GetHashCode(){
87:              return bunja.GetHashCode() ^
88:                   bunmo.GetHashCode() + 37;
89:          }
90:      }
91:  }
