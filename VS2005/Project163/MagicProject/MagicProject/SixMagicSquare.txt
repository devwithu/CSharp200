001:  using System;
002:  namespace Com.JungBo.Logic{
003:   public class SixMagicSquare{
004:      private int[,] mabang;//2차원 배열 선언
005:      private int top;//n-1
006:      //A,B,C,D 배열
007:      private int[,,] tm;
008:      public SixMagicSquare() :this(6){ }//기본생성자
009:      public SixMagicSquare(int n){
010:          this.Init(n);
011:      }//생성자
012:      public void Init(int n) {
013:          this.top = n - 1;
014:          this.mabang = new int[n, n];//생성, 초기화
015:          this.tm = new int[4, n / 2, n / 2];
016:      }
017:      public void Make() {
018:          MakeA();
019:          MakeB();
020:          MakeCD();
021:          this.Copy();
022:      }//Make
023:      //3과 0만들기
024:      private void MakeA() {
025:          int count = this.top + 1;
026:          for (int i = 0; i < count/2; i++){
027:              for (int j = 0; j < count/4; j++){
028:                  if (i == count / 4){
029:                      this.tm[0, i, j+1] = 3;
030:                  }
031:                  else {
032:                      this.tm[0, i, j ] = 3;
033:                  }
034:              }
035:          }
036:      }
037:       //1과 2만들기
038:      private void MakeB(){
039:          int count = this.top + 1;
040:          for (int i = 0; i < count / 2; i++){
041:              for (int j = 0; j < count / 2; j++){
042:                  this.tm[1, i, j] = 1;
043:              }
044:          }
045:          for (int i = 0; i < count / 2; i++){
046:              for (int j = 0; j < count / 2 -(count/4-1); j++){
047:                  this.tm[1, i, j ] = 2;
048:              }
049:          }
050:      }
051:       //AB를 반대로 만들기 
052:      private void MakeCD() {
053:          int count = this.top + 1;
054:          for (int i = 0; i < count / 2; i++){
055:              for (int j = 0; j < count/2 ; j++){
056:                  if(this.tm[0,i,j]==0){
057:                      this.tm[2, i, j] = 3;
058:                  }else if(this.tm[0,i,j]==3){
059:                      this.tm[2, i, j] = 0;
060:                  }
061:                  if (this.tm[1, i, j] == 1){
062:                      this.tm[3, i, j] = 2;
063:                  }else if (this.tm[1, i, j] == 2){
064:                      this.tm[3, i, j] = 1;
065:                  }
066:              }
067:          }
068:      }
069:       //N/2XN/2를 각 구역에 더하기
070:      private void Copy() {
071:          int count = this.top + 1;
072:          int multi = (count / 2) * (count / 2);
073:          OddMagicSquare odd =new OddMagicSquare(count/2);
074:          odd.Make();//홀수 마방진 완성
075:          int[,] oddM = odd.Mabang;//Property
076:          for (int i = 0; i < count / 2; i++){
077:              for (int j = 0; j < count / 2; j++){
078:                  mabang[i, j] = 
079:                      multi * this.tm[0, i, j] + oddM[i,j];
080:                  mabang[i, j + count / 2] =
081:                      multi * this.tm[1, i, j] + oddM[i, j];
082:                  mabang[i + count / 2, j] =
083:                      multi* this.tm[2, i, j] + oddM[i, j];
084:                  mabang[i + count / 2, j + count / 2] =      
085:                      multi*this.tm[3, i, j] + oddM[i, j];
086:              }
087:          }
088:      }
089:      public bool IsCheck(){
090:          bool isC = true;
091:          int count = top + 1;
092:          int[] ic = new int[2 * count + 2];
093:          for (int k = 0; k < count; k++)
094:          {
095:              ic[k] = SumRow(k);
096:              ic[k + count] = SumCol(k);
097:          }//
098:          ic[2 * count] = SumDiago();
099:          ic[2 * count + 1] = SumAntiDiago();
100:  
101:          for (int i = 1; i < ic.Length; i++)
102:          {
103:              if (ic[0] != ic[i])
104:              {
105:                  isC = false;
106:                  break;
107:              }
108:          }
109:          return isC;
110:      }//
111:      public int SumRow(int row)
112:      {
113:          int count = this.top + 1;
114:          int total = 0;
115:          for (int i = 0; i < count; i++)
116:          {
117:              total += this.mabang[row, i];
118:          }
119:          return total;
120:      }
121:      public int SumCol(int col)
122:      {
123:          int count = this.top + 1;
124:          int total = 0;
125:          for (int i = 0; i < count; i++)
126:          {
127:              total += this.mabang[i, col];
128:          }
129:          return total;
130:      }
131:      public int SumDiago()
132:      { //대각선
133:          int count = this.top + 1;
134:          int total = 0;
135:          for (int i = 0; i < count; i++)
136:          {
137:              total += this.mabang[i, i];
138:          }
139:          return total;
140:      }
141:      public int SumAntiDiago()
142:      {//역대각선
143:          int count = this.top + 1;
144:          int total = 0;
145:          for (int i = 0; i < count; i++)
146:          {
147:              total += this.mabang[i, count - i - 1];
148:          }
149:          return total;
150:      }
151:      public void Print()
152:      {
153:          int count = top + 1;
154:  
155:          for (int i = 0; i < count; i++)
156:          {
157:              for (int j = 0; j < count; j++)
158:              {
159:                  Console.Write("{0}\t", mabang[i, j]);
160:              }
161:              Console.WriteLine();
162:          }
163:          Console.WriteLine("Successs?  {0}",
164:                                       this.IsCheck());
165:      }//Print
166:      public void Prints()
167:      {
168:          int count = top + 1;
169:  
170:          for (int i = 0; i < count; i++)
171:          {
172:              for (int j = 0; j < count; j++)
173:              {
174:                  Console.Write("\t{0}", mabang[i, j]);
175:              }
176:              Console.Write("\tR:{0}\n", SumRow(i));
177:          }
178:          Console.Write("A:{0}", SumAntiDiago());
179:          for (int j = 0; j < count; j++)
180:          {
181:  
182:              Console.Write("\tC:{0}", SumCol(j));
183:  
184:          }
185:          Console.Write("\tD:{0}\n", SumDiago());
186:  
187:          Console.WriteLine("Successs?  {0}",
188:                                       this.IsCheck());
189:      }//Prints
190:   }
191:  }
